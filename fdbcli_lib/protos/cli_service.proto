syntax = "proto3";

package fdbcli_lib;

message Worker {
    message Locality {
        optional string process_id = 1;
        optional string zone_id = 2;
        optional string machine_id = 3;
        optional string dc_id = 4;
        optional string data_hall_id = 5;
    }

    optional string address = 1;
    optional string grpc_address = 2;
    optional string process_class = 3;
    optional Locality locality = 4;
}


//-- Coordinators ----

message GetCoordinatorsRequest {}
message GetCoordinatorsReply {
    repeated string coordinators = 1;
}

message ChangeCoordinatorsRequest {
    optional string cluster_description = 1;
    optional bool disable_config_db = 2;
    optional bool automatic_coordinators = 3;
    repeated string new_coordinator_addresses = 4;
}

message ChangeCoordinatorsReply {
    optional bool changed = 1;
    repeated string coordinators = 2;
}

// -- Database Configure ----

message ConfigureAutoSuggestRequest {}
message ConfigureAutoSuggestReply {
    ConfigureRequest configure_request = 1;
}

message ConfigureRequest {
    // Database creation
    optional bool new_database = 1; // Initialize new database
    optional bool tss = 2; // Configure testing storage server

    // Redundancy mode
    enum RedundancyMode {
        UNSET_REDUNDANCY = 0;
        SINGLE = 1;          // one copy, not fault tolerant
        DOUBLE = 2;          // two copies, survive one failure
        TRIPLE = 3;          // three copies, survive two failures
        THREE_DATA_HALL = 4; // three data hall configuration
        THREE_DATACENTER = 5; // three datacenter configuration
    }
    optional RedundancyMode redundancy_mode = 3;

    // Storage engine
    enum StorageEngine {
        UNSET_STORAGE = 0;
        SSD = 1;              // B-Tree optimized for SSDs
        SSD_1 = 2;            // ssd-1
        SSD_2 = 3;            // ssd-2
        MEMORY = 4;           // In-memory storage
        MEMORY_1 = 5;         // memory-1
        MEMORY_2 = 6;         // memory-2
        MEMORY_RADIXTREE = 7; // memory-radixtree
    }
    optional StorageEngine storage_engine = 4;

    // Process counts (-1 means restore to default)
    optional int32 logs = 5;
    optional int32 commit_proxies = 6;
    optional int32 grv_proxies = 7;
    optional int32 resolvers = 8;

    // Perpetual storage wiggle settings
    optional int32 perpetual_storage_wiggle = 9; // 0=disabled, 1=enabled
    optional string perpetual_storage_wiggle_locality = 10; // "locality_key:locality_value" or "0"
    optional string perpetual_storage_wiggle_engine = 11;

    // Migration and tenant settings
    enum StorageMigrationType {
        UNSET_MIGRATION = 0;
        DISABLED = 1;
        GRADUAL = 2;
        AGGRESSIVE = 3;
    }
    optional StorageMigrationType storage_migration_type = 12;

    // Security settings
    enum EncryptionAtRestMode {
        UNSET_ENCRYPTION = 0;
        DISABLED_ENCRYPTION = 1;
        DOMAIN_AWARE = 2;
        CLUSTER_AWARE = 3;
    }
    optional EncryptionAtRestMode encryption_at_rest_mode = 13;

    // Other settings
    optional bool blob_granules_enabled = 14;
    repeated string exclude_addresses = 15; // Addresses to exclude during recruitment
    optional int32 tss_count = 16; // Testing storage server count

    // Control flags
    optional bool force = 18; // Skip safety checks
}

message ConfigureReply {
    enum Result {
        SUCCESS = 0;
        NO_OPTIONS_PROVIDED = 1;
        CONFLICTING_OPTIONS = 2;
        UNKNOWN_OPTION = 3;
        INCOMPLETE_CONFIGURATION = 4;
        INVALID_CONFIGURATION = 5;
        STORAGE_MIGRATION_DISABLED = 6;
        DATABASE_ALREADY_CREATED = 7;
        DATABASE_CREATED = 8;
        DATABASE_UNAVAILABLE = 9;
        STORAGE_IN_UNKNOWN_DCID = 10;
        REGION_NOT_FULLY_REPLICATED = 11;
        MULTIPLE_ACTIVE_REGIONS = 12;
        REGIONS_CHANGED = 13;
        NOT_ENOUGH_WORKERS = 14;
        REGION_REPLICATION_MISMATCH = 15;
        DCID_MISSING = 16;
        LOCKED_NOT_NEW = 17;
        SUCCESS_WARN_PPW_GRADUAL = 18;
        SUCCESS_WARN_SHARDED_ROCKSDB_EXPERIMENTAL = 19;
        DATABASE_IS_REGISTERED = 20;
        ENCRYPTION_AT_REST_MODE_ALREADY_SET = 21;
        INVALID_STORAGE_TYPE = 22;
    }

    Result result = 1;
    optional string message = 2; // Additional details for errors or warnings
}

message GetReadVersionRequest {}
message GetReadVersionReply {
    optional int64 version = 1;
}

//-- Status ----

message GetStatusRequest {}
message GetStatusReply {
    optional string result = 1;
}

//-- Workers ----

message GetWorkersRequest {}
message GetWorkersReply {
    repeated Worker workers = 1;
}

message IncludeRequest {
    optional bool all = 1;
    repeated string addresses = 2;
    repeated string localities = 3;
    optional bool failed = 4;
}
message IncludeReply {}

message ExcludeRequest {
    optional bool all = 1;
    optional bool failed = 2;
    optional bool no_wait = 3;
    optional bool force = 4;
    repeated string localities = 5;
    repeated string processes = 6;
    repeated string hosts = 7;
}
message ExcludeReply {}

// TODO: Use Locality structure.
message ExcludeStatusRequest {}
message ExcludeStatusReply {
    repeated string excluded_addresses = 1;
    repeated string excluded_localities = 2;
    repeated string failed_addresses = 3;
    repeated string failed_localities = 4;
    repeated string in_progress_excludes = 5;
}

message KillRequest {
    optional bool all = 1;
    repeated string addresses = 2;
}
message KillReply {}

//-- RPCs ----

service CliService {
    rpc GetCoordinators(GetCoordinatorsRequest) returns (GetCoordinatorsReply);
    rpc ChangeCoordinators(ChangeCoordinatorsRequest) returns (ChangeCoordinatorsReply);

    rpc ConfigureAutoSuggest(ConfigureAutoSuggestRequest) returns (ConfigureAutoSuggestReply);
    rpc Configure(ConfigureRequest) returns (ConfigureReply);
    rpc GetReadVersion(GetReadVersionRequest) returns (GetReadVersionReply);

    rpc GetStatus(GetStatusRequest) returns (GetStatusReply);

    rpc GetWorkers(GetWorkersRequest) returns (GetWorkersReply);
    rpc Include(IncludeRequest) returns (IncludeReply);
    rpc Exclude(ExcludeRequest) returns (ExcludeReply);
    rpc ExcludeStatus(ExcludeStatusRequest) returns (ExcludeStatusReply);
    rpc Kill(KillRequest) returns (KillReply);
}
